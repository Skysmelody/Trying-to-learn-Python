井号（#）表示之后的字符为Python注释；
换行（\n）是标准的行分隔符（通常一个语句一行）；
反斜线（\）继续上一行；

>>>print ('''aaa               >>>print (aaa 
>>>aaa''')                        aaa)
aaa                              报错
aaa 

分号（;）将两个语句连接在一行中；
冒号（:）将代码块的头和体分开；
% 取模 - 返回除法的余数；

Python程序格式：
（1）　起始行
通常只有在类Unix环境下才使用起始行，有起始行就能够仅输入脚本名字来执行脚本，无需直接调用解释器。
（2）　模块文档
简要介绍模块的功能及重要全局变量的含义，模块外可通过module.__doc__访问这些内容。
（3）　模块导入
导入当前模块的代码需要的所有模块；每个模块仅导入一次（当前模块被加载时）；函数内部的模块导入代码不会被执行，除非该函数正在执行。
（4）　变量定义
这里定义的变量为全局变量，本模块中的所有函数都可直接使用。从好的编程风格角度说，除非必须，否则就要尽量使用局部变量代替全局变量，如果坚持这样做，你的代码就不但容易维护，而且还可以提高性能并节省内存。
（5）　类定义语句
所有的类都需要在这里定义。当模块被导入时class语句会被执行，类也就会被定义。类的文档变量是class.__doc__。
（6）　函数定义语句
此处定义的函数可以通过module.function()在外部被访问到，当模块被导入时def语句会被执行，函数也就都会定义好，函数的文档变量是function.__doc__。
（7）　主程序
无论这个模块是被别的模块导入还是作为脚本直接执行，都会执行这部分代码。通常这里不会有太多功能性代码，而是根据执行的模式调用不同的函数。
#user/bin/env

"this is a test module"

import sys
import os

debug = True

Class FooClass (object):
  "Foo class"
  pass
  
def test():
  "test function"
  foo = FooClass()
  if debug:
    print ("ran test()")

if __name__ == "__main__":
  test


赋值：
python可以进行链式赋值
>>> x = 1
>>> y = x = x+1
>>> print (x, y)
2 2

增量赋值：
等号可以和一个算术操作符组合在一起，将计算结果重新赋值给左边的变量
x=x+1 可以直接写成 x+=1
>>>x = 1
>>>x += 1
>>>print (x)
2

变量交换：
>>>x, y = 3, 4
>>>x, y = y, x
>>>print (x, y)
4 3

